<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VBO on zvcq&#39;s Blog</title>
    <link>https://zvcq.github.io/tags/vbo/</link>
    <description>Recent content in VBO on zvcq&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Fri, 15 Sep 2023 20:47:07 +0900</lastBuildDate><atom:link href="https://zvcq.github.io/tags/vbo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>타일 기반 2D 게임의 VAO 설계 전략</title>
      <link>https://zvcq.github.io/post/opengl/vao-design-strategies-for-tile-based-2d-games/</link>
      <pubDate>Fri, 15 Sep 2023 20:47:07 +0900</pubDate>
      
      <guid>https://zvcq.github.io/post/opengl/vao-design-strategies-for-tile-based-2d-games/</guid>
      <description>서론 타일 기반 2D 게임을 만들던 중 한가지 고민에 빠졌다. 대부분의 엔티티가 사각형의 형태로 렌더링되는데, OpenGL의 VAO를 어떻게 설계해야 효율적일지 머릿속에서 정리가 쉽지않았다.
이 글에서 내가 생각한 몇 가지 설계 전략과 그 장단점을 서술하고, 어떤 방식이 적합한지 비교분석 해보려고한다.
렌더링 방식 먼저, 하나의 렌더링 엔티티는 하나의 텍스처를 사용한다. 텍스처는 아래 3가지 중 하나의 방식으로 렌더링된다.
Image : 텍스처 전체를 렌더링한다. Sprite : NxM개의 그리드로 텍스처를 나누고, 그 중 하나를 렌더링한다. Atlas : NxM개의 그리드로 텍스처를 나누고, 이를 조합하여 하나의 큰 이미지를 렌더링한다.</description>
    </item>
    
  </channel>
</rss>
